namespace: monk-redis-cluster-haproxy


rds1:
  metadata:
    defines: metadata
    name: Redis
    description: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.
    website: https://redis.io
    publisher: monk.io
    icon: redis.png
  defines: runnable
  variables:
    image_tag:
      type: string
      value: <- `${redis_image_tag}`
    rds_port:
      type: int
      value: <- `${redis1_port}`
    rds_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: <- `${redis_disable_commands}`
    rds_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: <- `${redis_empty_password}`
    rds_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: <- `${redis_io_thread}`
    rds_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: <- `${redis_io_threads_do_reads}`
    volume_data:
      type: string
      value: <- `${monk-volume-path}/redis`
  containers:
    monk-rds:
      paths:
        - <- `${volume_data}/redis1:/bitnami/redis/data`
      ports:
        - <- `0.0.0.0:${rds_port}:6379`
      image: redis
  version: 1.0
  services:
    redis-svc:
      container: monk-rds
      port: 6379
      protocol: tcp


rds2: 
  metadata:
    defines: metadata
    name: Redis
    description: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.
    website: https://redis.io
    publisher: monk.io
    icon: redis.png
  defines: runnable
  connections:
    rds1:
      runnable: monk-redis-cluster-haproxy/rds1
      service: redis-svc
  variables:
    image_tag:
      type: string
      value: <- `${redis_image_tag}`
    rds_port:
      type: int
      value: <- `${redis2_port}`
    rds_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: <- `${redis_disable_commands}`
    rds_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: <- `${redis_empty_password}`
    rds_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: <- `${redis_io_thread}`
    rds_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: <- `${redis_io_threads_do_reads}`
    volume_data:
      type: string
      value: <- `${monk-volume-path}/redis`
    rds_master:
      env: REDIS_MASTER
      value: <- connection-hostname("rds1") split(".dns.podman") join("")
  containers:
    monk-rds:
      paths:
        - <- `${volume_data}/redis2:/bitnami/redis/data`
      ports:
        - <- `0.0.0.0:${rds_port}:6379`
      image: redis
      #bash: sleep 3600
      bash: <- `redis-server --slaveof ${rds_master} 6379`
  depends:
    wait-for:
      runnables:
        - monk-redis-cluster-haproxy/rds1
      timeout: 30
  version: 1.0
  services:
    redis-svc:
      container: monk-rds
      port: 6379
      protocol: tcp

rds3: 
  metadata:
    defines: metadata
    name: Redis
    description: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.
    website: https://redis.io
    publisher: monk.io
    icon: redis.png
  defines: runnable
  connections:
    rds1:
      runnable: monk-redis-cluster-haproxy/rds1
      service: redis-svc
  variables:
    image_tag:
      type: string
      value: <- `${redis_image_tag}`
    rds_port:
      type: int
      value: <- `${redis3_port}`
    rds_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: <- `${redis_disable_commands}`
    rds_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: <- `${redis_empty_password}`
    rds_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: <- `${redis_io_thread}`
    rds_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: <- `${redis_io_threads_do_reads}`
    volume_data:
      type: string
      value: <- `${monk-volume-path}/redis`
    rds_master:
      env: REDIS_MASTER
      value: <- connection-hostname("rds1") split(".dns.podman") join("")
  containers:
    monk-rds:
      paths:
        - <- `${volume_data}/redis3:/bitnami/redis/data`
      ports:
        - <- `0.0.0.0:${rds_port}:6379`
      image: redis
      #bash: sleep 3600
      bash: <- `redis-server --slaveof ${rds_master} 6379`
  depends:
    wait-for:
      runnables:
        - monk-redis-cluster-haproxy/rds1
      timeout: 30
  version: 1.0
  services:
    redis-svc:
      container: monk-rds
      port: 6379
      protocol: tcp

sentinel1:
  metadata:
    defines: metadata
    name: Sentinel
    description: High availability for non-clustered Redis
    website: https://redis.io
    publisher: monk.io
    icon: redis.png 
  defines: runnable
  connections:
    rds1:
      runnable: monk-redis-cluster-haproxy/rds1
      service: redis-svc
    rds2:
      runnable: monk-redis-cluster-haproxy/rds2
      service: redis-svc
    rds3:
      runnable: monk-redis-cluster-haproxy/rds3
      service: redis-svc
  variables:
    image_tag:
      type: string
      value: <- `${redis_image_tag}`
    rds_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: <- `${redis_disable_commands}`
    rds_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: <- `${redis_empty_password}`
    rds_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: <- `${redis_io_thread}`
    rds_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: <- `${redis_io_threads_do_reads}`
    rds_sentinel_quorum:
      env: SENTINEL_QUORUM
      value: 2
      type: string
    rds_sentinel_down_after:
      env: SENTINEL_DOWN_AFTER
      value: 5000
      type: string
    rds_sentinel_failover:
      env: SENTINEL_FAILOVER
      value: 10000
      type: string
    rds_sentinel_port:
      env: SENTINEL_FAILOVER
      value: 26000
      type: string
    rds_master:
      env: REDIS_MASTER
      value: <- connection-hostname("rds1") split(".dns.podman") join("")
    volume_data:
      type: string
      value: <- `${monk-volume-path}/redis`
  containers:
    monk-rds-sentinel:
      paths:
        - <- `${volume_data}/sentinel:/bitnami/redis/data`
      bash: redis-server /etc/redis/sentinel.conf --sentinel
      image: redis
  depends:
    wait-for:
      runnables:
        - monk-redis-cluster-haproxy/rds1
      timeout: 30
  version: 1.0
  files:
    defines: files
    sentinel_conf:
      contents: |
        port 26379
        dir /tmp
        sentinel resolve-hostnames yes
        sentinel monitor mymaster {{ v "rds_master"}} 6379 {{ v "rds_sentinel_quorum"}}
        sentinel down-after-milliseconds mymaster {{ v "rds_sentinel_down_after"}}
        sentinel parallel-syncs mymaster 1
        sentinel failover-timeout mymaster {{ v "rds_sentinel_failover"}}
      container: monk-rds-sentinel
      path: /etc/redis/sentinel.conf
      mode: 777
    entrypoint_sh:
      raw: true
      contents: |
        docker-entrypoint.sh redis-server /etc/redis/sentinel.conf --sentinel
      container: monk-rds-sentinel
      path: /usr/local/bin/entrypoint.sh
      mode: 755
  services:
    redis-svc:
      container: monk-rds-sentinel
      port: 6379
      protocol: tcp

haproxy: 
  connections:
    rds1:
      runnable: monk-redis-cluster-haproxy/rds1
      service: redis-svc
    rds2:
      runnable: monk-redis-cluster-haproxy/rds2
      service: redis-svc
    rds3:
      runnable: monk-redis-cluster-haproxy/rds3
      service: redis-svc
  defines: runnable
  variables:
    haproxy_port:
      type: string
      value: <- `${rds_haproxy_port}`
    rds_master:
      value: <- connection-hostname("rds1") split(".dns.podman") join("")
    rds_slave1:
      value: <- connection-hostname("rds2") split(".dns.podman") join("")
    rds_slave2:
      value: <- connection-hostname("rds3") split(".dns.podman") join("")
  containers:
    monk-rds-haproxy:
      image: haproxy
      ports:
        - <- `0.0.0.0:${haproxy_port}:6379`
        - <- `0.0.0.0:${rds_haproxy_stats_port}:9000`
      bash: haproxy -f /etc/haproxy/haproxy.cfg
      # bash: sleep 3600
  depends:
    wait-for:
      runnables:
        - monk-redis-cluster-haproxy/rds1
      timeout: 30
  version: 1.0
  files:
    defines: files
    sentinel_conf:
      contents: |
        defaults
          mode tcp
          timeout connect 3s
          timeout server 6s
          timeout client 6s
        listen stats
          mode http
          bind :9000
          stats enable
          stats hide-version
          stats realm Haproxy\ Statistics
          stats uri /haproxy_stats
        frontend ft_redis
          mode tcp
          bind *:6379
          default_backend bk_redis
        backend bk_redis
          mode tcp
          option tcp-check
          tcp-check send PING\r\n
          tcp-check expect string +PONG
          tcp-check send info\ replication\r\n
          tcp-check expect string role:master
          tcp-check send QUIT\r\n
          tcp-check expect string +OK
          server redis_backend_01 {{ v "rds_master" }}:6379 maxconn 1024 check inter 1s
          server redis_backend_02 {{ v "rds_slave1" }}:6379 maxconn 1024 check inter 1s
          server redis_backend_03 {{ v "rds_slave2" }}:6379 maxconn 1024 check inter 1s
      container: monk-rds-haproxy
      path: /etc/haproxy/haproxy.cfg
      mode: 644
  
  services:
    haproxy-svc:
      container: monk-rds-haproxy
      port: <- `${rds_haproxy_port}`
      protocol: tcp
      host-port: <- `${rds_haproxy_port}`
