---
namespace: redis-cluster-haproxy

base:
  defines: runnable
  metadata:
    name: Redis
    description: Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.
    website: https://redis.io
    publisher: monk.io
    icon: https://cdn.icon-icons.com/icons2/2415/PNG/512/redis_original_wordmark_logo_icon_146369.png
    private: true
    version: 1.0
  variables:
    redis_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: FLUSHDB,FLUSHALL,CONFIG
    redis_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: 'yes'
    redis_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: 1
    redis_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: 'yes'
    redis_instance_name:
      type: string
      value: master
  containers:
    redis:
      paths:
        - <- `${monk-volume-path}/redis/${redis_instance_name}:/bitnami/redis/data`
      image: bitnami/redis

redis-master:
  defines: runnable
  inherits: redis-cluster-haproxy/base
  variables:
    redis_port:
      type: string
      value: <- `${master_port}`
    redis_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: <- `${disable_commands}`
    redis_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: <- `${empty_password}`
    redis_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: <- `${io_thread}`
    redis_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: <- `${io_threads_do_reads}`
    redis_password:
      env: REDIS_PASSWORD
      type: string
      value: <- `${password}`
    redis_replication_mode:
      env: REDIS_REPLICATION_MODE
      type: string
      value: master
  containers:
    redis:
      ports:
        - <- `0.0.0.0:${redis_port}:6379`
  services:
    redis:
      container: redis
      port: 6379
      protocol: tcp

redis-slave-1:
  defines: runnable
  inherits: redis-cluster-haproxy/base
  connections:
    redis-master:
      runnable: redis-cluster-haproxy/redis-master
      service: redis
  variables:
    redis_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: <- `${disable_commands}`
    redis_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: <- `${empty_password}`
    redis_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: <- `${io_thread}`
    redis_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: <- `${io_threads_do_reads}`
    redis_password:
      env: REDIS_PASSWORD
      type: string
      value: <- `${password}`
    redis_port:
      type: string
      value: <- `${slave-1_port}`
    redis_instance_name:
      type: string
      value: slave-1
    redis_replication_mode:
      env: REDIS_REPLICATION_MODE
      type: string
      value: slave
    redis_master_host:
      env: REDIS_MASTER_HOST
      value: <- connection-hostname("redis-master")
      type: string
    redis_master_port:
      env: REDIS_MASTER_PORT_NUMBER
      value: <- connection-port("redis-master")
      type: string
    redis_master_password:
      env: REDIS_MASTER_PASSWORD
      type: string
      value: <- `${password}`
  containers:
    redis:
      ports:
        - <- `0.0.0.0:${redis_port}:6379`
  depends:
    wait-for:
      runnables:
        - redis-cluster-haproxy/redis-master
      timeout: 30
  services:
    redis:
      container: redis
      port: 6379
      protocol: tcp

redis-slave-2:
  defines: runnable
  inherits: redis-cluster-haproxy/base
  connections:
    redis-master:
      runnable: redis-cluster-haproxy/redis-master
      service: redis
  variables:
    redis_disable_commands:
      env: REDIS_DISABLE_COMMANDS
      type: string
      value: <- `${disable_commands}`
    redis_empty_password:
      env: ALLOW_EMPTY_PASSWORD
      type: string
      value: <- `${empty_password}`
    redis_io_thread:
      env: REDIS_IO_THREADS
      type: string
      value: <- `${io_thread}`
    redis_io_threads_do_reads:
      env: REDIS_IO_THREADS_DO_READS
      type: string
      value: <- `${io_threads_do_reads}`
    redis_password:
      env: REDIS_PASSWORD
      type: string
      value: <- `${password}`
    redis_port:
      type: string
      value: <- `${slave-2_port}`
    redis_instance_name:
      type: string
      value: slave-2
    redis_replication_mode:
      env: REDIS_REPLICATION_MODE
      type: string
      value: slave
    redis_master_host:
      env: REDIS_MASTER_HOST
      value: <- connection-hostname("redis-master")
      type: string
    redis_master_port:
      env: REDIS_MASTER_PORT_NUMBER
      value: <- connection-port("redis-master")
      type: string
    redis_master_password:
      env: REDIS_MASTER_PASSWORD
      type: string
      value: <- `${password}`
  containers:
    redis:
      ports:
        - <- `0.0.0.0:${redis_port}:6379`
  depends:
    wait-for:
      runnables:
        - redis-cluster-haproxy/redis-master
      timeout: 30
  services:
    redis:
      container: redis
      port: 6379
      protocol: tcp

sentinel:
  defines: runnable
  metadata:
    name: Redis Sentinel
    description: Redis Sentinel is a high-availability solution for Redis. It is a distributed system that monitors Redis instances and automatically performs failover when a master instance fails. Sentinel is designed to be highly available and fault-tolerant, ensuring that Redis instances are always available to clients.
    website: https://redis.io
    publisher: monk.io
    icon: https://cdn.icon-icons.com/icons2/2415/PNG/512/redis_original_wordmark_logo_icon_146369.png
    version: 1.0
    private: true
  connections:
    redis-master:
      runnable: redis-cluster-haproxy/redis-master
      service: redis
    redis-slave-1:
      runnable: redis-cluster-haproxy/redis-slave-1
      service: redis
    redis-slave-2:
      runnable: redis-cluster-haproxy/redis-slave-2
      service: redis
  variables:
    redis_master:
      env: REDIS_MASTER_HOST
      value: <- connection-hostname("redis-master")
      type: string
    redis_password:
      env: REDIS_MASTER_PASSWORD
      type: string
      value: <- `${password}`
    redis_port:
      env: REDIS_MASTER_PORT_NUMBER
      type: string
      value: <- connection-port("redis-master")
  containers:
    sentinel:
      image: bitnami/redis-sentinel
  depends:
    wait-for:
      runnables:
        - redis-cluster-haproxy/redis-master
      timeout: 30

haproxy:
  defines: runnable
  metadata:
    name: Haproxy
    description: HAProxy is a free and open source software that provides a high availability load balancer and reverse proxy for TCP and HTTP-based applications that spreads requests across multiple servers. It is written in C and has a reputation for being fast and efficient.
    website: https://www.haproxy.org/
    publisher: monk.io
    icon: https://www.haproxy.org/img/HAProxyCommunityEdition_60px.png
    version: 1.0
    private: true
  connections:
    redis-master:
      runnable: redis-cluster-haproxy/redis-master
      service: redis
    redis-slave-1:
      runnable: redis-cluster-haproxy/redis-slave-1
      service: redis
    redis-slave-2:
      runnable: redis-cluster-haproxy/redis-slave-2
      service: redis
  variables:
    haproxy_port:
      type: string
      value: <- `${rds_haproxy_port}`
    rds_master:
      value: <- connection-hostname("redis-master")
    rds_master_port:
      value: <- connection-port("redis-master")
    rds_slave1:
      value: <- connection-hostname("redis-slave-1")
    rds_slave1_port:
      value: <- connection-port("redis-slave-1")
    rds_slave2:
      value: <- connection-hostname("redis-slave-2")
    rds_slave2_port:
      value: <- connection-port("redis-slave-2")
    rds_pass:
      value: <- `${password}`
  containers:
    haproxy:
      image: haproxy
      ports:
        - <- `${haproxy_port}:6379`
        - <- `${rds_haproxy_stats_port}:9000`
      bash: haproxy -f /etc/haproxy/haproxy.cfg
  files:
    sentinel_conf:
      contents: |
        defaults
          mode tcp
          timeout connect 3s
          timeout server 6s
          timeout client 6s
        listen stats
          mode http
          bind :9000
          stats enable
          stats hide-version
          stats realm Haproxy\ Statistics
          stats uri /
        frontend ft_redis
          mode tcp
          bind *:6379
          default_backend bk_redis
        backend bk_redis
          mode tcp
          option tcp-check
          tcp-check send AUTH\ {{ v "rds_pass" }}\r\n
          tcp-check send PING\r\n
          tcp-check expect string +PONG
          tcp-check send info\ replication\r\n
          tcp-check expect string role:
          tcp-check send QUIT\r\n
          tcp-check expect string +OK
          server redis_backend_01 {{ v "rds_master" }}:{{ v "rds_master_port" }} maxconn 1024 check inter 1s
          server redis_backend_02 {{ v "rds_slave1" }}:{{ v "rds_slave1_port" }} maxconn 1024 check inter 1s
          server redis_backend_03 {{ v "rds_slave2" }}:{{ v "rds_slave2_port" }} maxconn 1024 check inter 1s
      container: haproxy
      path: /etc/haproxy/haproxy.cfg
      mode: 644
  services:
    haproxy-svc:
      container: haproxy
      port: <- `${rds_haproxy_port}`
      protocol: tcp
      host-port: <- `${rds_haproxy_port}`
  depends:
    wait-for:
      runnables:
        - redis-cluster-haproxy/redis-master
      timeout: 30
